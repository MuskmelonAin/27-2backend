'''
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ –∫—É—Ä—Å–∞–º–∏
üìå –¶–µ–ª—å:
–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫—É—Ä—Å–æ–≤ –∏ –∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫—É—Ä—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –û–û–ü –∏ SQLite3.

üß± –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (SQLite3):
students(id, full_name, age)
courses(id, title, teacher)
enrollments(id, student_id, course_id, grade)
üí° –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –û–û–ü:
‚úÖ 1. –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è:
–í—Å–µ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (__id, __connection, __name) —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏.
–î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ get_, set_.
‚úÖ 2. –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Person, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è Student.
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å DatabaseModel, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è Student, Course, Enrollment.
‚úÖ 3. –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º:
–ú–µ—Ç–æ–¥ info() –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ Student, Course, Enrollment.
–ú–µ—Ç–æ–¥ save_to_db() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö.
‚úÖ 4. –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è:
–í—Å–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å "—Å–ø—Ä—è—Ç–∞–Ω—ã" –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–æ–≤.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–Ω—è—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º: student.enroll(course) ‚Äî –∞ –Ω–µ cursor.execute(...)
üß™ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
 –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å
 –ó–∞–ø–∏—Å–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –∫—É—Ä—Å
 –ü—Ä–∏—Å–≤–æ–∏—Ç—å –æ—Ü–µ–Ω–∫—É
 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∫—É—Ä—Å–æ–≤
 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã –∏ –∫—Ç–æ –Ω–∞ –Ω–∏—Ö –∑–∞–ø–∏—Å–∞–Ω
üìò –ü—Ä–∏–º–µ—Ä CLI –º–µ–Ω—é:
1. –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
2. –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å
3. –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –∫—É—Ä—Å
4. –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É
5. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∫—É—Ä—Å—ã
6. –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
7. –í—ã—Ö–æ–¥
'''



import sqlite3
from abc import ABC, abstractmethod

class DatabaseModel(ABC):
    _connection = None

    @classmethod
    def connect(cls, db_name='university.db'):
        cls._connection = sqlite3.connect(db_name)
    
    @classmethod
    def close(cls):
        if cls._connection:
            cls._connection.close()
    
    @abstractmethod
    def save_to_db(self):
        pass
    
    @abstractmethod
    def info(self):
        pass

class Person(ABC):
    def init(self, full_name, age):
        self.__full_name = full_name
        self.__age = age
    
    @property
    def full_name(self):
        return self.__full_name
    
    @full_name.setter
    def full_name(self, value):
        self.__full_name = value
    
    @property
    def age(self):
        return self.__age
    
    @age.setter
    def age(self, value):
        self.__age = value

class Student(Person, DatabaseModel):
    def init(self, full_name, age, id=None):
        super().init(full_name, age)
        self.__id = id
    
    @property
    def id(self):
        return self.__id
    
    def save_to_db(self):
        if self.__id is None:
            cursor = self._connection.cursor()
            cursor.execute(
                "INSERT INTO students (full_name, age) VALUES (?, ?)",
                (self.full_name, self.age)
            )
            self.__id = cursor.lastrowid
            self._connection.commit()
        else:
            cursor = self._connection.cursor()
            cursor.execute(
                "UPDATE students SET full_name = ?, age = ? WHERE id = ?",
                (self.full_name, self.age, self.__id)
            )
            self._connection.commit()
    
    def info(self):
        return f"–°—Ç—É–¥–µ–Ω—Ç: {self.full_name}, –í–æ–∑—Ä–∞—Å—Ç: {self.age}, ID: {self.id}"
    
    def enroll(self, course):
        enrollment = Enrollment(self.id, course.id)
        enrollment.save_to_db()
        return enrollment
    
    def get_courses(self):
        cursor = self._connection.cursor()
        cursor.execute("""
            SELECT c.id, c.title, c.teacher, e.grade 
            FROM courses c
            JOIN enrollments e ON c.id = e.course_id
            WHERE e.student_id = ?
        """, (self.id,))
        return cursor.fetchall()
    
    @classmethod
    def get_all(cls):
        cursor = cls._connection.cursor()
        cursor.execute("SELECT id, full_name, age FROM students")
        return [Student(row[1], row[2], row[0]) for row in cursor.fetchall()]
    
    @classmethod
    def get_by_id(cls, student_id):
        cursor = cls._connection.cursor()
        cursor.execute("SELECT id, full_name, age FROM students WHERE id = ?", (student_id,))
        row = cursor.fetchone()
        if row:
            return Student(row[1], row[2], row[0])
        return None

class Course(DatabaseModel):
    def init(self, title, teacher, id=None):
        self.__id = id
        self.__title = title
        self.__teacher = teacher
    
    @property
    def id(self):
        return self.__id
    
    @property
    def title(self):
        return self.__title
    
    @title.setter
    def title(self, value):
        self.__title = value
    
    @property
    def teacher(self):
        return self.__teacher
    
    @teacher.setter
    def teacher(self, value):
        self.__teacher = value
    
    def save_to_db(self):
        if self.__id is None:
            cursor = self._connection.cursor()
            cursor.execute(
                "INSERT INTO courses (title, teacher) VALUES (?, ?)",
                (self.title, self.teacher)
            )
            self.__id = cursor.lastrowid
            self._connection.commit()
        else:
            cursor = self._connection.cursor()
            cursor.execute(
                "UPDATE courses SET title = ?, teacher = ? WHERE id = ?",
                (self.title, self.teacher, self.__id)
            )
            self._connection.commit()
    
    def info(self):
        return f"–ö—É—Ä—Å: {self.title}, –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {self.teacher}, ID: {self.id}"
    
    def get_students(self):
        cursor = self._connection.cursor()
        cursor.execute("""
            SELECT s.id, s.full_name, s.age, e.grade 
            FROM students s
            JOIN enrollments e ON s.id = e.student_id
            WHERE e.course_id = ?
        """, (self.id,))
        return cursor.fetchall()
    
    @classmethod
    def get_all(cls):
        cursor = cls._connection.cursor()
        cursor.execute("SELECT id, title, teacher FROM courses")
        return [Course(row[1], row[2], row[0]) for row in cursor.fetchall()]
    
    @classmethod
    def get_by_id(cls, course_id):
        cursor = cls._connection.cursor()
        cursor.execute("SELECT id, title, teacher FROM courses WHERE id = ?", (course_id,))
        row = cursor.fetchone()
        if row:
            return Course(row[1], row[2], row[0])
        return None

class Enrollment(DatabaseModel):
    def init(self, student_id, course_id, grade=None, id=None):
        self.__id = id
        self.__student_id = student_id
        self.__course_id = course_id
        self.__grade = grade
    
    @property
    def id(self):
        return self.__id
    
    @property
    def student_id(self):
        return self.__student_id
    
    @property
    def course_id(self):
        return self.__course_id
    
    @property
    def grade(self):
        return self.__grade
    
    @grade.setter
    def grade(self, value):
        self.__grade = value
    
    def save_to_db(self):
        if self.__id is None:
            cursor = self._connection.cursor()
            cursor.execute(
                "INSERT INTO enrollments (student_id, course_id, grade) VALUES (?, ?, ?)",
                (self.student_id, self.course_id, self.grade)
            )
            self.__id = cursor.lastrowid
            self._connection.commit()
        else:
            cursor = self._connection.cursor()
            cursor.execute(
                "UPDATE enrollments SET student_id = ?, course_id = ?, grade = ? WHERE id = ?",
                (self.student_id, self.course_id, self.grade, self.__id)
            )
            self._connection.commit()
    
    def info(self):
        return f"–ó–∞–ø–∏—Å—å: ID —Å—Ç—É–¥–µ–Ω—Ç–∞: {self.student_id}, ID –∫—É—Ä—Å–∞: {self.course_id}, –û—Ü–µ–Ω–∫–∞: {self.grade if self.grade else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
    
    @classmethod
    def get_by_student_and_course(cls, student_id, course_id):
        cursor = cls._connection.cursor()
        cursor.execute("""
            SELECT id, student_id, course_id, grade 
            FROM enrollments 
            WHERE student_id = ? AND course_id = ?
        """, (student_id, course_id))
        row = cursor.fetchone()
        if row:
            return Enrollment(row[1], row[2], row[3], row[0])
        return None
    
    @classmethod
    def get_all(cls):
        cursor = cls._connection.cursor()
        cursor.execute("SELECT id, student_id, course_id, grade FROM enrollments")
        return [Enrollment(row[1], row[2], row[3], row[0]) for row in cursor.fetchall()]

class UniversityApp:
    @staticmethod
    def initialize_database():
        connection = sqlite3.connect('university.db')
        cursor = connection.cursor()
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS students (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                full_name TEXT NOT NULL,
                age INTEGER NOT NULL
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS courses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                teacher TEXT NOT NULL
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS enrollments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER NOT NULL,
                course_id INTEGER NOT NULL,
                grade INTEGER,
                FOREIGN KEY (student_id) REFERENCES students(id),
                FOREIGN KEY (course_id) REFERENCES courses(id),
                UNIQUE(student_id, course_id)
            )
        """)
        
        connection.commit()
        connection.close()
    
    @staticmethod
    def run():
        DatabaseModel.connect()
        
        while True:
            print("\n–ú–µ–Ω—é:")
            print("1. –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞")
            print("2. –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
            print("3. –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –∫—É—Ä—Å")
            print("4. –ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É")
            print("5. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∫—É—Ä—Å—ã")
            print("6. –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
            print("7. –í—ã—Ö–æ–¥")
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ")
            
            if choice == "1":
                UniversityApp.add_student()
            elif choice == "2":
                UniversityApp.add_course()
            elif choice == "3":
                UniversityApp.enroll_student()
            elif choice == "4":
                UniversityApp.set_grade()
            elif choice == "5":
                UniversityApp.show_students_and_courses()
            elif choice == "6":
                UniversityApp.show_courses_and_students()
            elif choice == "7":
                print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        DatabaseModel.close()
    
    @staticmethod
    def add_student():
        print("\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        full_name = input("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞: ")
        age = int(input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: "))
        
        student = Student(full_name, age)
        student.save_to_db()
        print(f"–°—Ç—É–¥–µ–Ω—Ç {full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {student.id}")
    
    @staticmethod
    def add_course():
        print("\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞")
        title = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: ")
        teacher = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ")
        
        course = Course(title, teacher)
        course.save_to_db()
        print(f"–ö—É—Ä—Å {title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {course.id}")
    
    @staticmethod
    def enroll_student():
        print("\n–ó–∞–ø–∏—Å—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –∫—É—Ä—Å")
        
        students = Student.get_all()
        if not students:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            return
        
        print("\n–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
        for student in students:
            print(student.info())
        
        student_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞: "))
        student = Student.get_by_id(student_id)
        if not student:
            print("–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        courses = Course.get_all()
        if not courses:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫—É—Ä—Å—ã.")
            return
        
        print("\n–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤:")
        for course in courses:
            print(course.info())
        
        course_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∫—É—Ä—Å–∞: "))
        course = Course.get_by_id(course_id)
        if not course:
            print("–ö—É—Ä—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        existing_enrollment = Enrollment.get_by_student_and_course(student_id, course_id)
        if existing_enrollment:
            print("–≠—Ç–æ—Ç —Å—Ç—É–¥–µ–Ω—Ç —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –¥–∞–Ω–Ω—ã–π –∫—É—Ä—Å.")
            return
        
        enrollment = student.enroll(course)
        print(f"–°—Ç—É–¥–µ–Ω—Ç {student.full_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫—É—Ä—Å {course.title}")
    
    @staticmethod
    def set_grade():
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—É –∑–∞ –∫—É—Ä—Å")
        
        students = Student.get_all()
        if not students:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            return
        
        print("\n–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
        for student in students:
            print(student.info())
        
        student_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞: "))
        student = Student.get_by_id(student_id)
        if not student:
            print("–°—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        courses = student.get_courses()
        if not courses:
            print("–£ —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫—É—Ä—Å—ã.")
            return
        
        print("\n–ö—É—Ä—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç:")
        for i, course in enumerate(courses, 1):
            print(f"{i}. {course[1]} (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {course[2]}, –û—Ü–µ–Ω–∫–∞: {course[3] if course[3] else '–Ω–µ—Ç'})")
        
        course_index = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ü–µ–Ω–∫–∏: ")) - 1
        if course_index < 0 or course_index >= len(courses):
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞.")
            return
        
        course_id = courses[course_index][0]
        grade = int(input("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É (1-5): "))
        if grade < 1 or grade > 5:
            print("–û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
            return
        
        enrollment = Enrollment.get_by_student_and_course(student_id, course_id)
        if enrollment:
            enrollment.grade = grade
            enrollment.save_to_db()
            print(f"–û—Ü–µ–Ω–∫–∞ {grade} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.full_name} –∑–∞ –∫—É—Ä—Å {courses[course_index][1]}")
        else:
            print("–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    @staticmethod
    def show_students_and_courses():
        print("\n–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –∫—É—Ä—Å–æ–≤:")
        
        students = Student.get_all()
        if not students:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            return
        
        for student in students:
            print(f"\n{student.info()}")
            courses = student.get_courses()
            if courses:
                print("–ó–∞–ø–∏—Å–∞–Ω –Ω–∞ –∫—É—Ä—Å—ã:")
                for course in courses:
                    print(f"- {course[1]} (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {course[2]}, –û—Ü–µ–Ω–∫–∞: {course[3] if course[3] else '–Ω–µ—Ç'})")
            else:
                print("–ù–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫—É—Ä—Å.")
    
    @staticmethod
    def show_courses_and_students():
        print("\n–°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤ –∏ –∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
        
        courses = Course.get_all()
        if not courses:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
            return
        
        for course in courses:
            print(f"\n{course.info()}")
            students = course.get_students()
            if students:
                print("–°—Ç—É–¥–µ–Ω—Ç—ã –Ω–∞ –∫—É—Ä—Å–µ:")
                for student in students:
                    print(f"- {student[1]} (–í–æ–∑—Ä–∞—Å—Ç: {student[2]}, –û—Ü–µ–Ω–∫–∞: {student[3] if student[3] else '–Ω–µ—Ç'})")
            else:
                print("–ù–∞ –∫—É—Ä—Å –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω.")

if name == "main":
    UniversityApp.initialize_database()
    UniversityApp.run()